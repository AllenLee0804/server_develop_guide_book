【TME-腾讯音乐后台开发工程师（深圳）】
工作职责：
负责QQ音乐后台开发工作；
负责中大型项目的后台server软件架构和整体框架设计；
参与相关产品需求讨论与产品系统架构的设计和优化工作。
工作要求：

精通Linux平台下的C/C++开发：makefile，安装库，STL，boost，google开源了很多的第三方的轻量级的库，泛型化编程，

多态要能理解，回调函数，

熟悉Unix/Linux下常用架构设计方法：订阅发布机制，工厂设计模式（thrift），过滤器设计模式（查询），表驱动的设计


表格驱动：
{id, func1, func2, func3}

低耦合设计：可扩展的设计，regist，字典数据结构

nginx easydarwin ：


switch

case

if else if else if     else :


精通TCP/IP协议，熟悉网络编程 ：阻塞 、非阻塞 同步 异步 多路复用（epoll，协程，Reactor设计，libevent, easydarwin），TCP, tcp选项（算法），TIME_WAIT，源码 ：

熟悉多进程/多线程编程：eventfd + pipe，zeromq，线程池 + 内存池 + 连接池 + reactor设计   ==> 多进程监听同一端口，解决惊群问题，nginx的方案  reuseaddr reuseport ： 并发，锁，死锁，活锁，并发不共享资源

线程之间的通信 ：原子操作 CAS，协程，自旋锁

码农  ： 艺术 + 工程实践，  简单之美， 重构改善既有代码的设计， 设计模式



熟悉Mysql，Redis等数据库管理、开发，SQL调优：



具备良好的分析解决问题能力，能独立承担任务和有系统进度把控能力：
学习和总结 ： 项目管理（CMMI + 敏捷） +  沟通方法 ： 文档  知识管理 wifi TDD 


责任心强，良好的对外沟通和团队协作能力，主动，好学；

素质 ： 宁静致远  拿人家钱财替人消灾  家  掘金     


有互联网海量分布式系统设计和开发经验优先；查找算法 hash  


具备流媒体CDN成熟优化经验者优先 ：音视频传输  + 编解码 + 音视频同步 + WebRTC srs nginx + rtmp ， easydarwin， live555，== > 低延时（KCP） + SIP + UDP， 网络自适应  热切换（线路）


CDN  5
CND  5

株洲  ： 

要做有性生活的码农  -- Lee哥：急， 情商 ： 学习，《少有人走的路》

                                                 《一次性把正确的事情做正确》
                                                 《成功人士的7个工作习惯》                                     
                                                 《丰田模式》

【发展前景广，福利多多，欢迎投递~】


1. 读写数据库的压力很大，mysql最大也就是4~5W/s的请求
   
   调优：从磁盘里加载数据，网络IO + 磁盘IO ==>机械硬盘  -- SSD
         读写分离：
         一部分mysql 192.168.1.2 ~ 192.168.1.5 ：读
         
                     192.168.1.6 ~ 192.168.1.10：写
                     
                     数据库同步：bin.log
        
        数据量可能会很大：表的数据很大：查询的时候会比较慢 --> 索引  优化表的结构
        大表分成小表：1亿条数据： 用户ID， 或者说其它ID， 0~100W --> 表1，100W~200W 表2
        数据库的连接池：
    
    HBase
    
    冷的。
    
    热的方式，缓存：redis / memcashed / anna (1.0)
    cashed verything(所有的数据放在内存里)。缓存和数据同步更新，从redis里面去读。
    
    1. 热：经常访问的数据放在内存里。不经常访问的数据就放在数据库里。对于redis的数据有淘汰机制。
    
    2. 多个redis服务器：（集群）：存在内存（塌机了怎么办？单点故障） --> 数据库里Load数据。短时间内增加了数据库的压力，解决办法：备份，主从，1主2从，2x2组（主从 + 主从）。
    
    多个redis：我的数据到底在哪里？我的数据是否是均衡分布的？
    
    1（主 + 从）， 2（主 + 从）， 3（主 + 从）， 4（主 + 从）， 5（主 + 从）
    
    一致性hash算法？
    
    可靠性（单点故障）：
    
    redis是一个单线程的使用，100W/s   32核  48核 --> anna 多进程
    
    2. 测试系统是否能达到70~80W的并发   -->  超过80W的时候会有什么后果发送，灰度测试：1，2, 3，==> 优化：重构架构设计，局部优化：a,b,c,d,e,f,g ==> 寒冬将至，准备娘草
                                                              
    优化方法 1. BBR优化算法，应用层组包，
             
             2. 落到IO上面，网卡中断队列：单队列：一收一发    ==>  多队列  客户端的IO请求分布到不同的队列去， 多进程多线程绑定CPU， CPU绑定中断队列。
             
             3. read send 系统调用 （）  --> DPDK NetMap 直接从网卡读数据放到用户态缓存，用户态协议怎么做？TCP / UDP 协议自己实现，不放在内核，mtcp，linux的实现，FreeBsd：
             
             4. hugepage，4k, 1024k，9096k,
             
             http://gad.qq.com/article/detail/17452
    
    3. 集群：并行提供服务，
    
    4. 分布式：把一个大的问题拆分成很多小的问题：微服务的架构： 用户服务（User service）：用户注册，用户登录
                                                                单车的管理(Bike Service) ：
                                                                .....
       远程调用：RPC thrift gRPC， Dubo 、 Mantan，同步调用，
       MQ:  zeroMQ，半成品（提供组件，需要我们基于这些组件做开发）kafaka, ActiveMQ, RocketMQ，异步调用，
       ZK:  服务发现，分布式的协调服务（分布式锁：重入性，读写锁）
       Eruka：
       
       1亿的阶乘：Map-Reduce
       
    可靠性怎么设计：主从备份，ID（全局ID的设计，Zookeeper）
    
    一致性怎么设计：一致性hash，Zab算法，主从，选举，
    
    可扩展性：
    
    5. 持久化：mysql，淘宝FS，GFS：martin老师很懂
    
    
    
             
    
        
                     
         